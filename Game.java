import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

/**
 * the instance of this class represents a game that could have one or more
 * hands.<br>
 * if there is only 1 hand, there will not be information about the winners
 * <br>
 * if there are more than 1 hand, the instance will generate the
 * information about the winners
 * 
 * @author name: 
 * @author login name:
 * @author Student ID:
 * 
 */

public class Game {
    /** Cache the hands in this game as an array */
    Hand[] hands;

    /** Cache the hands' description in this game as a string */
    String description = "";

    /** Cache the winners' description in this game as a string */
    String winner = "";

    /**
     * this is a void constructor
     */
    public Game() {
        super();
    }

    /**
     * this is a constructor<br>
     * accept a string array to generate the {@code hands},
     * {@code description}, {@code winners} of the Game
     * 
     * @param s
     *            s is a string array to generate hands
     */
    public Game(String[] s) {
        this.hands = getHandsArray(s);
        setDescription();
        if (hands.length > 1) {
            setWinner();
        }
    }

    /**
     * accept a string array to generate the {@code hands},
     * 
     * @param s
     *            s is a string array to generate the {@code hands},
     * @return {@code hands} generated by s.
     * @see Card#Card(String)
     * @see Hand#Hand(String[])
     */
    private Hand[] getHandsArray(String[] s) {
        /*
         * each element in s can generate a card. 
         * 5 cards can form a hand.
         */
        Hand[] hands = null;
        try {
            if (s.length % 5 != 0 || s.length == 0) {
                throw new MyException("Error: wrong number of arguments; "
                        + "must be a multiple of 5");
            }
            hands = new Hand[s.length / 5];
            for (int i = 0; i < s.length / 5; i++) {
                hands[i] = new Hand(Arrays.copyOfRange(s, i * 5, i * 5 + 5));
                hands[i].setPlayerNumber(i + 1);
            }
        } catch (MyException e) {
            System.out.println(e.getMessage());
            System.exit(0);
        }
        return hands;
    }

    /**
     * this method {@code setDescription} in class {@code Game} set the
     * {@code description} from the description of each hand in
     * {@code hands}
     * 
     * @see #description
     */
    private void setDescription() {
        for (Hand h : hands) {
            description = description + h.toString() + "\n";
        }
    }

    /**
     * this method {@code setWinner} in class {@code Game} set the
     * {@code winner} from the {@code hands}
     * 
     * @see Hand#compareTo(Hand)
     * @see #winner
     */
    private void setWinner() {
        /*
         * firstly sort the hands, and store the players number of the
         * largest hand(s) in the ArrayList
         * 
         * secondly generate the winners information based on the ArrayList:
         * if there only one player, do not set the winner.
         * if there are more than player, set the winner 
         * 
         */

        Arrays.sort(hands);
        ArrayList<Integer> winnersNumbers = new ArrayList<Integer>();
        winnersNumbers.add(hands[hands.length - 1].getPlayerNumber());
        for (int i = hands.length - 2; i >= 0; i--) {
            if (hands[i].compareTo(hands[hands.length - 1]) == 0) {
                winnersNumbers.add(hands[i].getPlayerNumber());

            } else {
                break;
            }
        }
        if (winnersNumbers.size() == 1) {
            winner = winner + "Player " + winnersNumbers.get(0) + " wins.\n";
        } else if (winnersNumbers.size() > 1) {
            winner = winner + "Players ";
            Collections.sort(winnersNumbers);
            for (int i = 0; i < winnersNumbers.size() - 1; i++) {
                winner = winner + winnersNumbers.get(i) + ", ";
            }
            winner = winner.substring(0, winner.length() - 2) + " and "
                    + winnersNumbers.get(winnersNumbers.size() - 1)
                    + " draw.\n";
        }

    }

    /**
     * Returns a string representation of the game. The {@code toString}
     * method for class {@code Game} returns a string consisting of the
     * description and winners information of the Card
     * 
     * @return a string representation of the game.
     * @see #description
     * @see #winner
     */
    public String toString() {
        return this.description + this.winner;
    }

}
